<?php
App::uses('AppController', 'Controller');
/**
 * Loans Controller
 * Generated by Petit Four the online baking tool for CakePHP: http://patisserie.keensoftware.com
 * @property Loan $Loan
 */
class LoansController extends AppController {
	
	public function beforeFilter() {
		parent::beforeFilter();
	}

/**
 * index method
 *
 * @return void
 */
	public function index() {
		$this->Loan->recursive = 1;
		$this->set('loans', $this->paginate());
	}

/**
 * view method
 *
 * @throws NotFoundException
 * @param int id
 * @return void
 */
	public function view($id = null) {
		if (!$this->Loan->exists($id)) {
			throw new NotFoundException(__('Invalid loan'));
		}
		$options = array(
			'conditions' => array('Loan.' . $this->Loan->primaryKey => $id),
			'contain' => array(
				'Copy' => array(
					'Book' => array(
						'Author',
						'Imprint' => array(
							'Publisher',
						),
					),
				),
				'User',	
			),
		);
		$this->set('loan', $this->Loan->find('first', $options));
	}

/**
 * add method
 *
 * @return void
 */
	public function add() {
		if ($this->request->is('post')) {
			$this->Loan->create();
			if ($this->Loan->save($this->request->data)) {
				$this->Flash->set(__('The loan has been saved', 'success'));
				return $this->redirect(array('action' => 'add'));
			} else {
				$this->Flash->set(__('The loan could not be saved. Please, try again.'));
			}
		}
		
		$this->loadModel('Copy');
		
		$copies = $this->Copy->find('list');
		
		$user = Auth::user();
		
		$this->set(compact('copies', 'user'));
	}

/**
 * edit method
 *
 * @throws NotFoundException
 * @param int id
 * @return void
 */
	public function edit($id = null) {
		if (!$this->Loan->exists($id)) {
			throw new NotFoundException(__('Invalid loan'));
		}
		if ($this->request->is('post') || $this->request->is('put')) {
			if ($this->Loan->save($this->request->data)) {
				$this->Flash->set(__('The loan has been saved'));
				return $this->redirect(array('action' => 'index'));
			} else {
				$this->Flash->set(__('The loan could not be saved. Please, try again.'));
			}
		} else {
			$options = array('conditions' => array('Loan.' . $this->Loan->primaryKey => $id));
			$this->request->data = $this->Loan->find('first', $options);
		}
		$loans = $this->Loan->Loan->find('list');
		$books = $this->Loan->Book->find('list');
		$this->set(compact('loans', 'books'));
	}

/**
 * delete method
 *
 * @throws NotFoundException
 * @throws MethodNotAllowedException
 * @param int id
 * @return void
 */
	public function delete($id = null) {
		$this->Loan->id = $id;
		if (!$this->Loan->exists()) {
			throw new NotFoundException(__('Invalid loan'));
		}
		$this->request->onlyAllow('post', 'delete');
		if ($this->Loan->delete()) {
			$this->Flash->set(__('The loan has been deleted.'));
		} else {
			$this->Flash->set(__('The loan could not be deleted. Please, try again.'));
		}
		return $this->redirect(array('action' => 'index'));
	}

/**
 * checkin method
 *
 * @throws NotFoundException
 * @param int id
 * @return void
 */
/*
	public function checkin($id = null) {
		if ($this->request->is('post') || $this->request->is('put')) {
			if (empty($this->request->data['Loan'])) {
				$this->Flash->set('No data entered for checkin');
				return $this->redirect(array('controller' => 'loans', 'action' => 'checkin'));
			}
			if (empty($this->request->data['Loan']['legacy_book_number'])) {
				$this->Flash->set('No book number entered');
				return $this->redirect(array('controller' => 'loans', 'action' => 'checkin'));
			}
			if (empty($this->request->data['Loan']['legacy_check_number'])) {
				$this->Flash->set('No check number entered');
				return $this->redirect(array('controller' => 'loans', 'action' => 'checkin'));
			}
			$loan_search = $this->Loan->find('all', array(
				'fields'		=>	array('Loan.id', 'Book.title', ),
				'joins'			=>	array(
					array(
						'table'			=>	'loans',
						'alias'			=>	'Loan',
						'type'			=>	'INNER',
						'conditions'	=>	array(
							'Loan.loan_id = Loan.id',
						),
					),
					array(
						'table'			=>	'books',
						'alias'			=>	'Book',
						'type'			=>	'INNER',
						'conditions'	=>	array(
							'Loan.book_id = Book.id',
						),
					),
				),
				'conditions'	=>	array(
										'Loan.legacy_book_number'	=>	$this->request->data['Loan']['legacy_book_number'],
										'Loan.legacy_check_number'	=>	$this->request->data['Loan']['legacy_check_number'],
										'Loan.returned_date'		=>	null,
									),
			));
			echo "<pre>";
			print_r($this->request->data);
			print_r($loan_search);
			die();
		} else {
			$options = array('conditions' => array('Loan.' . $this->Loan->primaryKey => $id));
			$this->request->data = $this->Loan->find('first', $options);
		}
		$loans = $this->Loan->Loan->find('list');
		$books = $this->Loan->Book->find('list');
		$this->set(compact('loans', 'books'));
	}
*/


/**
 * checkin method
 *
 * @throws NotFoundException
 * @param int id
 * @return void
 */

	public function checkin($id = null) {
		if ($this->request->is('post') || $this->request->is('put')) {
			if (empty($this->request->data['Loan'])) {
				$this->Flash->set('No data entered for checkin');
				return $this->redirect(array('controller' => 'loans', 'action' => 'checkin'));
			}
			$this->Loan->save($this->request->data);
		}
		$loans = $this->Loan->find('list');
		$books = $this->Loan->Copy->Book->find('list');
		$this->set(compact('loans', 'books'));
	}

	
	public function lookup() {
		$this->autoRender = false;
		//echo "<pre>"; print_r($this->request->data); die();
		if ($this->request->is('get')) {
			if (isset($this->request->query['legacy_book_number']) && isset($this->request->query['legacy_check_number'])) {
				
				$results = $this->Loan->find('all', array(
					'conditions' => array(
						'Loan.legacy_book_number' => $this->request->query['legacy_book_number'],
						'Loan.legacy_check_number' => $this->request->query['legacy_check_number'],
					),
				));
				
				return json_encode($results);
			}
		}
	}
}
