<?php
App::uses('AppController', 'Controller');
/**
 * Books Controller
 * Generated by Petit Four the online baking tool for CakePHP: http://patisserie.keensoftware.com
 * @property Book $Book
 */
class BooksController extends AppController {
	
	public function beforeFilter() {
		parent::beforeFilter();
	}

/**
 * index method
 *
 * @return void
 */
	public function index() {
		$this->Book->recursive = 1;
		$this->set('books', $this->paginate());
	}

/**
 * view method
 *
 * @throws NotFoundException
 * @param int id
 * @return void
 */
	public function view($id = null) {
		if (!$this->Book->exists($id)) {
			throw new NotFoundException(__('Invalid book'));
		}
		$options = array(
			'conditions' => array('Book.' . $this->Book->primaryKey => $id),
			'contain' => array(
				'Author',
				'Copy' => array(
					'Loan' => array(
						'User',
					),
				),
				'Imprint' => array(
					'Publisher',
				),
			),
		);
		$this->set('book', $this->Book->find('first', $options));
	}

/**
 * add method
 *
 * @return void
 */
	public function add() {
		if ($this->request->is('post')) {
			$this->Book->create();
			if ($this->Book->save($this->request->data)) {
				$this->Flash->set(__('The book has been saved'));
				return $this->redirect(array('action' => 'index'));
			} else {
				$this->Flash->set(__('The book could not be saved. Please, try again.'));
			}
		}
		$authors = $this->Book->Author->find('list');
		$taxonomies = $this->Book->Taxonomy->find('list');
		$this->set(compact('authors', 'taxonomies'));
	}

/**
 * edit method
 *
 * @throws NotFoundException
 * @param int id
 * @return void
 */
	public function edit($id = null) {
		if (!$this->Book->exists($id)) {
			throw new NotFoundException(__('Invalid book'));
		}
		if ($this->request->is('post') || $this->request->is('put')) {
			if ($this->Book->save($this->request->data)) {
				$this->Flash->set(__('The book has been saved'));
				return $this->redirect(array('action' => 'index'));
			} else {
				$this->Flash->set(__('The book could not be saved. Please, try again.'));
			}
		} else {
			$options = array('conditions' => array('Book.' . $this->Book->primaryKey => $id));
			$this->request->data = $this->Book->find('first', $options);
		}
		$authors = $this->Book->Author->find('list');
		$taxonomies = $this->Book->Taxonomy->find('list');
		$this->set(compact('authors', 'taxonomies'));
	}

/**
 * delete method
 *
 * @throws NotFoundException
 * @throws MethodNotAllowedException
 * @param int id
 * @return void
 */
	public function delete($id = null) {
		$this->Book->id = $id;
		if (!$this->Book->exists()) {
			throw new NotFoundException(__('Invalid book'));
		}
		$this->request->onlyAllow('post', 'delete');
		if ($this->Book->delete()) {
			$this->Flash->set(__('The book has been deleted.'));
		} else {
			$this->Flash->set(__('The book could not be deleted. Please, try again.'));
		}
		return $this->redirect(array('action' => 'index'));
	}
	
/**
 * lookup method
 *
 */
	public function lookup() {
		$this->autoRender = false;
		//if ($this->request->is('ajax')) {
		if (true) {
			$search = array(
				//'fields'		=>	array('Book.id','Book.title','Loan.returned_date','Author.full_name'),
				'contain'		=>	array(
					'Copy' => array(
						'Loan'
					),
					'Author',
				),
				'conditions'	=>	array("Book.title LIKE '%".implode("%' AND Book.title LIKE '%",explode(' ',$this->request->query['term']))."%'"),
			);
			$results = $this->Book->find('all', $search);
			
			$output = array();
			
			$available_only = (isset($this->request->query['available']) && ($this->request->query['available'] == 1));
			
			foreach ($results as $r) {
				$add_to_output = true;
				if ($available_only) {
					// We only want available books
					if (!isset($r['Loan'])) {
						// There's no loans of this book on record
						$add_to_output = true;
					} else {
						//print_r($r); die();
						// There are loans - see if any are current
						$tsnow = time();
						foreach ($r['Loan'] as $l) {
							//if (time($l['due_date']) >= $tsnow) {
							if ($l['returned_date'] == null) {
								// Book checked out
								$add_to_output = false;
								break;
							}
						}
					}
				} else {
					// We want all books
					$add_to_output = true;
				}
				
				//die(print_r($r,true));
				
				if ($add_to_output) {
					$authors = array();
					foreach ($r['Author'] as $a) {
						$authors[] = $a['full_name'];
					}
					if (count($authors)==0) {
						$authors = '';
					} else {
						$authors = ' (' . implode(', ',$authors) . ')';
					}
					$output[] = array(
						'label' => '<b>' . $r['Book']['title'] . '</b>' . $authors,
						'value' => $r['Book']['id']
					);
				}
			}
			if (count($output) == 0) {
				if ($available_only) {
					$output = array('label' => 'No available books match your search', 'value' => 0);
				} else {
					$output = array('label' => 'No books match your search', 'value' => 0);
				}
			}
			return json_encode($output);
		}
	}

/**
*/
	public function search_old() {
		//echo "<pre>"; print_r($this->request->data); die();
		if ($this->request->is('get')) {
			if (isset($this->request->query['search_string'])) {
				$search_string = $this->request->query['search_string'];
				$search_string_parts = str_replace(' ',"%' AND {{field}} LIKE '%", $search_string);
				
				$results = $this->Book->find('all', array(
					'fields' => array(
						'Book.id',
						'Book.title',
						'GROUP_CONCAT(DISTINCT Author.id ORDER BY Author.id) AS AuthorId',
						'GROUP_CONCAT(DISTINCT Author.first_names ORDER BY Author.id) AS AuthorFirstNames',
						'GROUP_CONCAT(DISTINCT Author.last_name ORDER BY Author.id) AS AuthorLastName',
						'COUNT(DISTINCT Copy.id) AS CopyCount',
						'COUNT(DISTINCT Copy.id) - COUNT(DISTINCT Loan.id) AS AvailableCount',
						/*'User.id',
						'User.first_name',
						'User.last_name',*/
					),
					'joins' => array(
						array(
							'table' => 'authors_books',
							'alias' => 'AuthorBook',
							'type' => 'LEFT',
							'conditions' => array('Book.id = AuthorBook.book_id'),
						),
						array(
							'table' => 'authors',
							'alias' => 'Author',
							'type' => 'LEFT',
							'conditions' => array('Author.id = AuthorBook.author_id'),
						),
						array(
							'table' => 'books_taxonomies',
							'alias' => 'BookTaxonomy',
							'type' => 'LEFT',
							'conditions' => array('Book.id = BookTaxonomy.book_id'),
						),
						array(
							'table' => 'taxonomies',
							'alias' => 'Taxonomy',
							'type' => 'LEFT',
							'conditions' => array('Taxonomy.id = BookTaxonomy.taxonomy_id'),
						),
						array(
							'table' => 'copies',
							'alias' => 'Copy',
							'type' => 'LEFT',
							'conditions' => array('Book.id = Copy.book_id'),
						),
						array(
							'table' => 'loans',
							'alias' => 'Loan',
							'type' => 'LEFT',
							'conditions' => array('Copy.id = Loan.copy_id', 'Loan.returned_date IS NULL'), // Only want outstanding loans
						),/*
						array(
							'table' => 'users',
							'alias' => 'User',
							'type' => 'LEFT',
							'conditions' => array('User.id = Loan.user_id'),
						),*/
					),
					'group' => array(
						'Book.id',
					),
					'order' => array(
						'Book.title',
						'Book.id',
					),
					/*'contain' => array(
						'Author',
						'Taxonomy',
						//'Publisher',
					),*/
					'conditions' => array(
						'OR' => array(
							str_replace("{{field}}","Book.title","Book.title LIKE '%{$search_string_parts}%' "),
							str_replace("{{field}}","Author.first_names","Author.first_names LIKE '%{$search_string_parts}%' "),
							str_replace("{{field}}","Author.last_name","author.last_name LIKE '%{$search_string_parts}%' "),
						),
					),
				));
				
				//$this->set('results', $this->paginate());
				$this->set(compact('results'));
			}
		} elseif ($this->request->is('post') && isset($this->request->data['Book']['book_id'])) {
			// Redirect to that book
			$this->redirect( array( 'controller' => 'books', 'action' => 'view', $this->request->data['Book']['book_id'] ) );
		}
	}

/**
*/
	public function search() {
		//echo "<pre>"; print_r($this->request->data); die();
		
		/*
		Search structure
		1. Search by title
		2. Search by author
		3. Search by taxonomy (direct tagging)
		4. Search by taxonomy (classification)
		5. Combine 3 & 4
		*/
		
		if ($this->request->is('get')) {
			if (isset($this->request->query['search_string'])) {
				$search_string = $this->request->query['search_string'];
				$search_string_parts = str_replace(' ',"%' AND {{field}} LIKE '%", $search_string);
				
				$results = array();
				$results['title'] = $this->Book->find('all', array(
					'fields' => array(
						'GROUP_CONCAT(DISTINCT Book.id) AS id_list',
					),
					'order' => array(
						'Book.id',
					),					
					'conditions' => array(
						str_replace("{{field}}","Book.title","Book.title LIKE '%{$search_string_parts}%' "),
					),
				));
				$results['author'] = $this->Book->find('all', array(
					'fields' => array(
						'GROUP_CONCAT(DISTINCT Book.id) AS id_list',
					),
					'joins' => array(
						array(
							'table' => 'authors_books',
							'alias' => 'AuthorBook',
							'type' => 'LEFT',
							'conditions' => array('Book.id = AuthorBook.book_id'),
						),
						array(
							'table' => 'authors',
							'alias' => 'Author',
							'type' => 'LEFT',
							'conditions' => array('Author.id = AuthorBook.author_id'),
						),
					),
					'order' => array(
						'Book.id',
					),					
					'conditions' => array(
						'OR' => array(
							str_replace("{{field}}","Author.first_names","Author.first_names LIKE '%{$search_string_parts}%' "),
							str_replace("{{field}}","Author.last_name","author.last_name LIKE '%{$search_string_parts}%' "),
						),
					),
				));
				$results['taxonomy'] = $this->Book->find('all', array(
					'fields' => array(
						'GROUP_CONCAT(DISTINCT Book.id) AS id_list',
					),
					'joins' => array(
						array(
							'table' => 'books_taxonomies',
							'alias' => 'BookTaxonomy',
							'type' => 'LEFT',
							'conditions' => array('Book.id = BookTaxonomy.book_id'),
						),
						array(
							'table' => 'taxonomies',
							'alias' => 'Taxonomy',
							'type' => 'LEFT',
							'conditions' => array('Taxonomy.id = BookTaxonomy.taxonomy_id'),
						),
					),
					'order' => array(
						'Book.id',
					),					
					'conditions' => array(
						str_replace("{{field}}","Taxonomy.term","Taxonomy.term LIKE '%{$search_string_parts}%' "),
					),
				));
				$results['classification'] = $this->Book->find('all', array(
					'fields' => array(
						'GROUP_CONCAT(DISTINCT Book.id) AS id_list',
					),
					'joins' => array(
						array(
							'table' => 'deweycategories',
							'alias' => 'Deweycategory',
							'type' => 'INNER',
							'conditions' => array('Book.classification LIKE Deweycategory.search_string'),
						),
						array(
							'table' => 'deweycategories_taxonomies',
							'alias' => 'DeweycategoryTaxonomy',
							'type' => 'INNER',
							'conditions' => array('Deweycategory.id = DeweycategoryTaxonomy.deweycategory_id'),
						),
						array(
							'table' => 'taxonomies',
							'alias' => 'Taxonomy',
							'type' => 'INNER',
							'conditions' => array('Taxonomy.id = DeweycategoryTaxonomy.taxonomy_id'),
						),
					),
					'order' => array(
						'Book.id',
					),					
					'conditions' => array(
						str_replace("{{field}}","Taxonomy.term","Taxonomy.term LIKE '%{$search_string_parts}%' "),
					),
				));
				
				//echo "<pre>".print_r($results, true)."</pre>";
				$id_list = array();
				
				$all_keys = array_keys($results);
				
				// Get concatenated IDs into $id_lists
				foreach ($all_keys as $k) {
					if (count($results[$k]) == 0) {
						$id_list[$k] = '';
					} else {
						$id_list[$k] = $results[$k][0][0]['id_list'];
					}
					if ($id_list[$k] == '') { $id_list[$k] = '-1'; }
				}
				$id_list['taxonomy'] = trim($id_list['taxonomy'] . ',' . $id_list['classification'], ',');
				unset($id_list['classification']);
				
				//$this->log(array_keys($id_list), 'DebugKit');
				$all_keys = array_keys($id_list);
				
				// Turn all id-lists into result sets				
				foreach ($all_keys as $k) {
					$results[$k] = $this->Book->find('all' , array(
						'contain' => array(
							'Copy' => array(
								'Loan' => array(
									'User',
								),
							),
							'Author',
							'Taxonomy',
							//'Publisher',
						),
						'conditions' => array(
							"Book.id IN /*{$k}*/ ({$id_list[$k]})",
						),
					) );
				}
				
				//$this->set('results', $this->paginate());
				$this->set(compact('results'));
			}
		} elseif ($this->request->is('post') && isset($this->request->data['Book']['book_id'])) {
			// Redirect to that book
			$this->redirect( array( 'controller' => 'books', 'action' => 'view', $this->request->data['Book']['book_id'] ) );
		}
	}

}