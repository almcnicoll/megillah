<?php
App::uses('AppController', 'Controller');
/**
 * Copies Controller
 * Generated by Petit Four the online baking tool for CakePHP: http://patisserie.keensoftware.com
 * @property Copy $Copy
 */
class CopiesController extends AppController {
	
	public function beforeFilter() {
		parent::beforeFilter();
	}

/**
 * index method
 *
 * @return void
 */
	public function index() {
		$this->Copy->recursive = 1;
		$this->set('copies', $this->paginate());
	}

/**
 * view method
 *
 * @throws NotFoundException
 * @param int id
 * @return void
 */
	public function view($id = null) {
		if (!$this->Copy->exists($id)) {
			throw new NotFoundException(__('Invalid copy'));
		}
		$options = array(
			'conditions' => array('Copy.' . $this->Copy->primaryKey => $id),
			'contain' => array(
				'Book' => array(
					'Author',
					'Imprint' => array(
						'Publisher',
					),
				),
				'Loan' => array(
					'User',
				),				
			),
		);
		$this->set('copy', $this->Copy->find('first', $options));
	}

/**
 * add method
 *
 * @return void
 */
	public function add() {
		if ($this->request->is('post')) {
			$this->Copy->create();
			if ($this->Copy->save($this->request->data)) {
				$this->Flash->set(__('The copy has been saved'));
				return $this->redirect(array('action' => 'index'));
			} else {
				$this->Flash->set(__('The copy could not be saved. Please, try again.'));
			}
		}
		$loans = $this->Copy->Loan->find('list');
		$books = $this->Copy->Book->find('list');
		$this->set(compact('loans', 'books'));
	}

/**
 * edit method
 *
 * @throws NotFoundException
 * @param int id
 * @return void
 */
	public function edit($id = null) {
		if (!$this->Copy->exists($id)) {
			throw new NotFoundException(__('Invalid copy'));
		}
		if ($this->request->is('post') || $this->request->is('put')) {
			if ($this->Copy->save($this->request->data)) {
				$this->Flash->set(__('The copy has been saved'));
				return $this->redirect(array('action' => 'index'));
			} else {
				$this->Flash->set(__('The copy could not be saved. Please, try again.'));
			}
		} else {
			$options = array('conditions' => array('Copy.' . $this->Copy->primaryKey => $id));
			$this->request->data = $this->Copy->find('first', $options);
		}
		$loans = $this->Copy->Loan->find('list');
		$books = $this->Copy->Book->find('list');
		$this->set(compact('loans', 'books'));
	}

/**
 * delete method
 *
 * @throws NotFoundException
 * @throws MethodNotAllowedException
 * @param int id
 * @return void
 */
	public function delete($id = null) {
		$this->Copy->id = $id;
		if (!$this->Copy->exists()) {
			throw new NotFoundException(__('Invalid copy'));
		}
		$this->request->onlyAllow('post', 'delete');
		if ($this->Copy->delete()) {
			$this->Flash->set(__('The copy has been deleted.'));
		} else {
			$this->Flash->set(__('The copy could not be deleted. Please, try again.'));
		}
		return $this->redirect(array('action' => 'index'));
	}

	public function lookup() {
		$this->autoRender = false;
		
		$book_number = null;
		$check_number = null;
		$available_only = false;
		
		if ($this->request->is('get')) {
			if (isset($this->request->query['legacy_book_number']) && isset($this->request->query['legacy_check_number'])) {
				$book_number = $this->request->query['legacy_book_number'];
				$check_number = $this->request->query['legacy_check_number'];
				if (isset($this->request->query['available_only'])) { $available_only = $this->request->query['available_only']; }
			}
		} elseif ($this->request->is('post')) {
			if (isset($this->request->data['legacy_book_number']) && isset($this->request->data['legacy_check_number'])) {
				$book_number = $this->request->data['legacy_book_number'];
				$check_number = $this->request->data['legacy_check_number'];
				if (isset($this->request->data['available_only'])) { $available_only = $this->request->data['available_only']; }
			}
		} else {
			$output = array(
				'DOM' => array(
					'set_value' => array(
						'LoanCopyId' => '',
						'LoanId' => '',
					),
					'set_html' => array(
						'LookupSuccessMessage' => '',
						'LookupErrorMessage' => 'Invalid HTTP verb',
					),
					'set_attr' => array(
						'check_in_submit' => array(
							'class' => 'hidden',
						),
					),
				),
			);
			return json_encode($output);
		}
		
		// Return results
		$conditions = array(
			'Copy.legacy_book_number' => $book_number,
			'Copy.legacy_check_number' => $check_number,
		);
		/*if ($available_only) {
			$conditions['Copy.available'] = true;
		}*/
		$results = $this->Copy->find('all', array(
			'conditions' => $conditions,
		));
		
		if(is_array($results) && (count($results)>0)) {
			if ($available_only) {
				// We only want available copies
				$available = true;
				for ($i=count($results)-1; $i>=0; $i--) {
					$result = $results[$i];
					foreach ($result['Loan'] as $loan) {
						if (empty($loan['returned_date'])) {
							$available = false;
							break;
						}
					}
					// There's an outstanding loan, so it's not available
					if (!$available) { unset($results[$i]); }
				}
			}
			
			if(is_array($results) && (count($results)>0)) {
				// Get loan id if appropriate
				$loan_id = 0;
				$result = $results[0];
				if(isset($result['Loan'])) {
					if (isset($result['Loan'][0])) {
						$loan_id = $result['Loan'][0]['id'];
					} else { die('#'.__LINE__); }
				} else { die('#'.__LINE__); }
				
				// Still have results after any availability filter
				$output = array(
					'DOM' => array(
						'set_value' => array(
							'LoanCopyId' => $results[0]['Copy']['id'],
							'LoanId' => $loan_id,
						),
						'set_html' => array(
							'LookupSuccessMessage' => "&#x2713; {$results[0]['Book']['title']}",
							'LookupErrorMessage' => '',
						),
						'set_attr' => array(
							'check_in_submit' => array(
								'class' => '',
							),
						),
					),
				);
			} else {
				// Results gone - must be unavailable (i.e. checked out)
				$output = array(
					'DOM' => array(
						'set_value' => array(
							'LoanCopyId' => 0,
							'LoanId' => 0,
						),
						'set_html' => array(
							'LookupSuccessMessage' => '',
							'LookupErrorMessage' => "The copy specified is already checked out",
						),
						'set_attr' => array(
							'check_in_submit' => array(
								'class' => 'hidden',
							),
						),
					),
				);
			}
		} else {
			if (empty($book_number) || empty($check_number)) {
				$output = array(
					'DOM' => array(
						'set_value' => array(
							'LoanCopyId' => '',
							'LoanId' => '',
						),
						'set_html' => array(
							'LookupSuccessMessage' => '',
							'LookupErrorMessage' => '',
						),
						'set_attr' => array(
							'check_in_submit' => array(
								'class' => 'hidden',
							),
						),
					),
				);
			} else {
				$output = array(
					'DOM' => array(
						'set_value' => array(
							'LoanCopyId' => '',
							'LoanId' => '',
						),
						'set_html' => array(
							'LookupSuccessMessage' => '',
							'LookupErrorMessage' => 'Please enter valid book number / check number',
						),
						'set_attr' => array(
							'check_in_submit' => array(
								'class' => 'hidden',
							),
						),
					),
				);
			}
		}
		
		return json_encode($output);
	}
}
